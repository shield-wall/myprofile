name: CI/api

on:
  push:
    branches:
      - master

  pull_request_target:
    types:
      - opened
      - synchronize

env:
  APP_ENV: ${{ secrets.APP_ENV }}
  MAILER_DSN: ${{ secrets.MAILER_DSN }}
  MAILER_USER: ${{ secrets.MAILER_USER }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  TRANSLOADIT_KEY: ${{ secrets.TRANSLOADIT_KEY }}
  TRANSLOADIT_SECRET: ${{ secrets.TRANSLOADIT_SECRET }}
  TRANSLOADIT_DELIVERY: 1

defaults:
  run:
    shell: bash
    working-directory: api

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    container:
      image: eerison/myprofile:dev
    services:
      db:
        image: postgres
        env:
          POSTGRES_USER: myprofile
          POSTGRES_PASSWORD: 123456
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            ./api/bin/.phpunit
            ./api/vendor
            ./api/public
            ./api/config/jwt
          restore-keys: |
            ${{ runner.os }}-build-${{ hashFiles('**/symfony.lock') }}-
            ${{ runner.os }}-build-
      - name: Composer
        run: composer dev

      - name: Generate JWT pems
        run: composer jwt

      - name: Phpunit version
        run: bin/phpunit --version

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: build
    container:
      image: eerison/myprofile:dev
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            ./api/bin/.phpunit
            ./api/vendor
            ./api/public
            ./api/config/jwt
      - name: See files
        run: |
          pwd
          ls -lha
      - name: Code Sniffer
        run: composer lint_phpcs

      - name: Symfony Containers
        run: composer lint_container

      - name: Rector php
        run: vendor/bin/rector process src --dry-run

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build
    env:
      APP_ENV: test
      MAILER_DSN: null://null
      XDEBUG_MODE: coverage
    container:
      image: eerison/myprofile:dev
    services:
      db:
        image: postgres
        env:
          POSTGRES_USER: myprofile
          POSTGRES_PASSWORD: 123456
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            ./api/bin/.phpunit
            ./api/vendor
            ./api/public
            ./api/config/jwt
      - name: Setup Database
        run: composer db

      - name: Fixtures
        run: composer fixtures

      - name: Validate Data base
        run: bin/console doctrine:schema:validate

      - name: See files
        run: |
          pwd
          ls -lha
      - name: Run Tests
        run: composer test

      - name: Codecov
        uses: codecov/codecov-action@v2
        with:
          flags: api

  deploy_pr:
    name: Deploy - Pull request
    runs-on: ubuntu-latest
    if: github.event_name != 'push'
    environment:
      name: staging_pr
      url: https://${{env.APP_NAME}}.herokuapp.com
    env:
      APP_NAME: my-profile-pr-${{ github.event.number }}
    needs:
      - lint
      - test
    container:
      image: eerison/myprofile:dev
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: rlespinasse/github-slug-action@v3.x

      - uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-build-${{ hashFiles('**/symfony.lock') }}-${{ hashFiles('**/composer.lock') }}
          path: |
            ./api/bin/.phpunit
            ./api/vendor
            ./api/public
            ./api/config/jwt
      - name: See files
        run: |
          pwd
          ls -lha
      - name: Web deploy
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: $APP_NAME
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          usedocker: true
          docker_build_args: |
            APP_ENV
            APP_DEBUG
            GIT_REF
            MAILER_DSN
            MAILER_USER
            SENTRY_DSN
            TRANSLOADIT_KEY
            TRANSLOADIT_SECRET
            TRANSLOADIT_DELIVERY
        env:
          APP_DEBUG: false
          GIT_REF: ${{ env.GITHUB_REF_SLUG }}

      - name: Create Database
        continue-on-error: true
        run:  heroku addons:create heroku-postgresql --app $APP_NAME --name postgresql-$APP_NAME

      - name: Migrations
        run: heroku run --app $APP_NAME composer migrate

      - name: Fixtures
        run: heroku run --app $APP_NAME composer fixtures